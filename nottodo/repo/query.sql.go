// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTodos = `-- name: CountTodos :one
SELECT COUNT(*) FROM todos
`

func (q *Queries) CountTodos(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTodos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodo = `-- name: CreateTodo :exec
INSERT INTO todos (title, description, completed)
VALUES ($1, $2, $3)
`

type CreateTodoParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Completed   bool        `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.Exec(ctx, createTodo, arg.Title, arg.Description, arg.Completed)
	return err
}

const deleteCache = `-- name: DeleteCache :exec
DELETE FROM app_cache
WHERE key = $1
`

// 删除一个缓存项
func (q *Queries) DeleteCache(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteCache, key)
	return err
}

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings
WHERE key = $1
`

func (q *Queries) DeleteSetting(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteSetting, key)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getCache = `-- name: GetCache :one

SELECT value, expires_at FROM app_cache
WHERE key = $1
`

type GetCacheRow struct {
	Value     []byte             `json:"value"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

// ===============================
// 获取一个缓存项，同时返回它的值和过期时间
func (q *Queries) GetCache(ctx context.Context, key string) (GetCacheRow, error) {
	row := q.db.QueryRow(ctx, getCache, key)
	var i GetCacheRow
	err := row.Scan(&i.Value, &i.ExpiresAt)
	return i, err
}

const getSetting = `-- name: GetSetting :one

SELECT key, value, description, updated_at FROM settings
WHERE key = $1
`

// ===============================
func (q *Queries) GetSetting(ctx context.Context, key string) (Setting, error) {
	row := q.db.QueryRow(ctx, getSetting, key)
	var i Setting
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, description, completed, created_at FROM todos
WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const listSettings = `-- name: ListSettings :many
SELECT key, value, description, updated_at FROM settings
`

func (q *Queries) ListSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.Query(ctx, listSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.Key,
			&i.Value,
			&i.Description,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, description, completed, created_at FROM todos
ORDER BY id
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purgeExpiredCache = `-- name: PurgeExpiredCache :exec
DELETE FROM app_cache
WHERE expires_at < NOW()
`

// 清理所有已经过期的缓存项
func (q *Queries) PurgeExpiredCache(ctx context.Context) error {
	_, err := q.db.Exec(ctx, purgeExpiredCache)
	return err
}

const setCache = `-- name: SetCache :exec
INSERT INTO app_cache (key, value, expires_at)
VALUES ($1, $2, $3)
ON CONFLICT (key) DO UPDATE
SET value = EXCLUDED.value,
    expires_at = EXCLUDED.expires_at
`

type SetCacheParams struct {
	Key       string             `json:"key"`
	Value     []byte             `json:"value"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

// 使用 UPSERT (INSERT ... ON CONFLICT) 来设置缓存，这是原子操作
func (q *Queries) SetCache(ctx context.Context, arg SetCacheParams) error {
	_, err := q.db.Exec(ctx, setCache, arg.Key, arg.Value, arg.ExpiresAt)
	return err
}

const setSetting = `-- name: SetSetting :one
INSERT INTO settings (key, value)
VALUES ($1, $2)
ON CONFLICT (key) DO UPDATE
SET value = EXCLUDED.value, updated_at = NOW()
RETURNING key, value, description, updated_at
`

type SetSettingParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) SetSetting(ctx context.Context, arg SetSettingParams) (Setting, error) {
	row := q.db.QueryRow(ctx, setSetting, arg.Key, arg.Value)
	var i Setting
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET title = $2, description = $3, completed = $4
WHERE id = $1
`

type UpdateTodoParams struct {
	ID          int64       `json:"id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Completed   bool        `json:"completed"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Completed,
	)
	return err
}
